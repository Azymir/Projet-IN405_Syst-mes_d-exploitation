#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>

#include "deck.h"
#include "mes_types.h"
#include "joueur.h"
#include "banque.h"

int main(int argc, char *argv[])
{
	initDeckLib();

	//La banque

	printf("\n");

	INIT I = lire_init(argv[1]);

	BANQUE *B = malloc(sizeof(BANQUE) * I.nbJoueurs);

	for (int i = 0; i < I.nbJoueurs; i++) {	// lecture de chaque lignes pour creer les joueurs à partir de banque

		B[i] = lire_banque(argv[1], i);

	}

	deck_t *Deck = initDeck(P52, I.nbDecks);
	shuffleDeck(Deck);

	

	// La structure game

	GAME G;
	G.J = malloc(I.nbJoueurs * sizeof(JOUEUR));
	G.I = I;
	G.B = B;
	G.Deck = Deck;

	// autres

	char BC[20];		// cartes banques
	int BT;			// total banque temporaire

	for (int i = 0; i < G.I.nbJoueurs; i++) {

		G.J[i].stop = 0;
	}

	// les threads
	pthread_t *Tid;
	Tid = calloc(G.I.nbJoueurs, sizeof(pthread_t));

	for (int j = 0;
	     j < G.I.nbMains && getDrawPileSize(Deck) > G.I.nbJoueurs * 4;
	     j++) {

		G.tour = j;

		printf("\n\n\nTour %d : \n\n", j + 1);
		BT = 0;
		memset(BC, 0, sizeof(BC));

		while (BT < 17) {

			BC[strlen(BC)] = takeCard(Deck);

			BT = calcul_total(BC);

		}

		printf("- La banque a pioché %s, total : %d\n\n", BC, BT);
		for (int i = 0; i < G.I.nbJoueurs; i++) {

			memset(G.J[i].banque, 0, sizeof(G.J[i].banque));
			strcat(G.J[i].banque, BC);

		}

		for (int i = 0; i < G.I.nbJoueurs; i++) {
			G.joueur = i;

			if (pthread_create(&Tid[i], NULL, tours, &G)) {
				perror("La création du thread a echoué");
				return EXIT_FAILURE;
			}

		}

		for (int i = 0; i < G.I.nbJoueurs; i++) {

			if (pthread_join(Tid[i], NULL)) {

				perror("La récéption du thread a échoué");
				return EXIT_FAILURE;
			}

		}

	}



	if (getDrawPileSize(Deck) <= I.nbJoueurs * 4) {

		printf
		    ("\n\n\nLe jeu se termine car il n'y a plus assez de cartes\n\n");

	} else {

		printf("\n\n\nToutes les mains ont été jouées\n\n");

	}

	//les free et tout

	removeDeck(Deck);
	free(B);
	free(G.J);
	free(Tid);

	exit(0);
}
